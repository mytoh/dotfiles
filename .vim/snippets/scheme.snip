
snippet use
abbr (use module)
     (use ${1})

snippet def
abbr    (define ())
        (define (${1})
          ${2}
          )

snippet script-header
abbr    gauche script templete
        ":"; exec gosh -- $\0 "$@"
        ;; -*- coding: utf-8 -*-

snippet script
abbr    gauche script templete
        ":"; exec gosh -- "$0" "$@"
        ;; -*- coding: utf-8 -*-

        (use gauche.process)
        (use gauche.parseopt)
        (use util.match)
        (use ${1})

        (define (main args)
          )

snippet let
abbr    (let (()))
        (let ((${1}))
          (${2})
          )

snippet disp
        (display
          ${1}
          )

snippet let-args
  (let-args (cdr args)
    ((#f "h|help" (usage 0))
     . rest)
    (match (car rest)
      ("${1}"
       (${2}))
      (_ (usage 1))))


snippet syntax
        (define-syntax ${1}
          (syntax-rules ()
            ((_ ${2}))))


snippet usage
   (define (usage status)
     (exit status "usage: ~a <command> <package-name>\n" *program-name*))

snippet kaava
abbr    panna kaava script
        ;;; -*- coding: utf-8 -*-

        (use panna.kaava)

        (kaava "${1}")
        (homepage "${2}")
        (repository "${3}")

        (define (install tynnyri)
          (with-clang)
          (system
          `(./configure ,(string-append "--prefix=" tynnyri))
          '(make)
          '(make install)
          '(make clean)
          '(make distclean)
          ))


snippet run
abbr    run-process with :wait
        (run-process '(${1}) :wait #t)

snippet module
         ;; -*- coding: utf-8 -*-

         (define-module ${1}
           (export)
           (use ${2}))
         (select-module $1)

snippet utf8
        ;; -*- coding: utf-8 -*-


snippet lib
        (library (${1})
          (export
             ${2})
          (import
            (rnrs)
            ${3})

        (begin
          ${4}

          ))

snippet srfi1
abbr    srfi lists
        (srfi :1 lists)

snippet srfi2
abbr    srfi and-let*
        (srfi :2 and-let*)

snippet srfi6
abbr    srfi basic-string-ports
        (srfi :6 basic-string-ports)

snippet srfi8
abbr    srfi receive
        (srfi :8 receive)

snippet srfi9
abbr    srfi records
        (srfi :9 records)

snippet srfi11
abbr    srfi let-values
        (srfi :11 let-values)

snippet srfi13
abbr    srfi strings
        (srfi :13 strings)

snippet srfi14
abbr    srfi char-sets
        (srfi :14 char-sets)

snippet srfi16
abbr    srfi case-lambda
        (srfi :16 case-lambda)

snippet srfi19
abbr    srfi time
        (srfi :19 time)

snippet srfi23
abbr    srfi error
        (srfi :23 error)

snippet srfi26
abbr    srfi cut
        (srfi :26 cut)

snippet srfi27
abbr    srfi random-bits
        (srfi :27 random-bits)

snippet srfi31
abbr    srfi rec
        (srfi :31 rec)

snippet srfi37
abbr    srfi args-fold
        (srfi :37 args-fold)

snippet srfi38
abbr    srfi with-shared-structure
        (srfi :38 with-shared-structure)

snippet srfi39
abbr    srfi parameters
        (srfi :39 parameters)

snippet srfi41
abbr    srfi streams
        (srfi :41 streams)

snippet srfi42
abbr    srfi eager-comprehensions
        (srfi :42 eager-comprehensions)

snippet srfi43
abbr    srfi vectors
        (srfi :43 vectors)

snippet srfi48
abbr    srfi intermediate-format-strings
        (srfi :48 intermediate-format-strings)

snippet srfi61
abbr    srfi cond
        (srfi :61 cond)

snippet srfi64
abbr    srfi cond
        (srfi :64 cond)

snippet srfi67
abbr    srfi compare-procedures
        (srfi :67 compare-procedures)

snippet srfi78
abbr    srfi lightweight-testing
        (srfi :78 lightweight-testing)

snippet srfi98
abbr    srfi os-environment-variables
        (srfi :98 os-environment-variables)

snippet srfi99
abbr    srfi records
        (srfi :99 records)
