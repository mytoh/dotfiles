
snippet use
abbr (use module)
     (use ${1})

snippet def
abbr    (define ())
        (define (${1})
          ${2}
          )

snippet script
abbr    gauche script templete
        #!/usr/bin/env gosh

        (use gauche.process)
        (use gauche.parseopt)
        (use util.match)
        (use ${1})

        (define (main args)
          )

snippet let
abbr    (let (()))
        (let ((${1}))
          (${2})
          )

snippet disp
        (display
          ${1}
          )

snippet let-args
  (let-args (cdr args)
    ((#f "h|help" (usage 0))
     . rest)
    (match (car rest)
      ("${1}"
       (${2}))
      (_ (usage 1))))

snippet usage
(define (usage status)
  (exit status "usage: ~a <command> <package-name>\n" *program-name*))

snippet panna
abbr    panna kaava script
        #!/usr/bin/env gosh

        (use gauche.process)
        (use gauche.parameter)
        (use file.util)
        (use kirjasto)
        (load (build-path (sys-getenv "PANNA_PATH") "kirjasto" "ympäristö"))

        (define kaava (make-parameter "${1}"))
        (define riisi-directory (make-parameter (build-path (gitdir) (kaava))))
        (define panna-directory   (make-parameter (resolve-path (sys-getenv "PANNA_PATH"))))
        (define kellari-directory (make-parameter (build-path (panna-directory) "kellari")))
        (define tynnyri-directory (make-parameter (build-path (kellari-directory) (kaava))))


        (define (update)
          (run-process '(${2}) :wait #t))

        (define (build)
          (run-process '(make clean) :wait #t)
          (run-process '(make distclean) :wait #t)
          (run-process '(make) :wait #t)
          (run-process '(make install) :wait #t))

snippet run
abbr    run-process with :wait
        (run-process '(${1}) :wait #t)
