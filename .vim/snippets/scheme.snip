
snippet use
abbr (use module)
     (use ${1})

snippet def
abbr    (define ())
        (define (${1})
          ${2}
          )

snippet script
abbr    gauche script templete
        ":"; exec gosh -- $0 "$@"
        ;; -*- coding: utf-8 -*-

        (use gauche.process)
        (use gauche.parseopt)
        (use util.match)
        (use ${1})

        (define (main args)
          )

snippet let
abbr    (let (()))
        (let ((${1}))
          (${2})
          )

snippet disp
        (display
          ${1}
          )

snippet let-args
  (let-args (cdr args)
    ((#f "h|help" (usage 0))
     . rest)
    (match (car rest)
      ("${1}"
       (${2}))
      (_ (usage 1))))


snippet syntax
        (define-syntax ${1}
          (syntax-rules ()
            ((_ ${2}))))


snippet usage
   (define (usage status)
     (exit status "usage: ~a <command> <package-name>\n" *program-name*))

snippet kaava
abbr    panna kaava script
        ;;; -*- coding: utf-8 -*-

        (use panna.kaava)

        (kaava "${1}")
        (homepage "${2}")
        (repository "${3}")

        (define (install tynnyri)
          (with-clang)
          (system
          `(./configure ,(string-append "--prefix=" tynnyri))
          '(make)
          '(make install)
          '(make clean)
          '(make distclean)
          ))


snippet run
abbr    run-process with :wait
        (run-process '(${1}) :wait #t)

snippet module
         ;; -*- coding: utf-8 -*-

         (define-module ${1}
           (export)
           (use ${2}))
         (select-module $1)

snippet utf8
        ;; -*- coding: utf-8 -*-
