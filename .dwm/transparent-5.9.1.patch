--- dwm.c	2011-10-06 05:43:12.000000000 +0900
+++ dwm.c.orig	2011-10-06 05:08:36.000000000 +0900
@@ -58,7 +58,7 @@
 enum { CurNormal, CurResize, CurMove, CurLast };        /* cursor */
 enum { ColBorder, ColFG, ColBG, ColLast };              /* color */
 enum { NetSupported, NetWMName, NetWMState,
-       NetWMFullscreen, NetActiveWindow, NetWMWindowOpacity, NetLast };     /* EWMH atoms */
+       NetWMFullscreen, NetActiveWindow, NetLast };     /* EWMH atoms */
 enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
        ClkClientWin, ClkRootWin, ClkLast };             /* clicks */
@@ -93,7 +93,6 @@
 	Client *snext;
 	Monitor *mon;
 	Window win;
-  double opacity;
 };
 
 typedef struct {
@@ -150,7 +149,6 @@
 	unsigned int tags;
 	Bool isfloating;
 	int monitor;
-  double opacity;
 } Rule;
 
 /* function declarations */
@@ -181,7 +179,6 @@
 static void drawtext(const char *text, unsigned long col[ColLast], Bool invert);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
-static void window_opacity_set(Client *c, double opacity);
 static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
@@ -307,7 +304,6 @@
 		&& (!r->instance || strstr(instance, r->instance)))
 		{
 			c->isfloating = r->isfloating;
-      c->opacity = r->opacity;
 			c->tags |= r->tags;
 			for(m = mons; m && m->num != r->monitor; m = m->next);
 			if(m)
@@ -857,25 +853,12 @@
 }
 
 void
-window_opacity_set(Client *c, double opacity) {
-  if(opacity >= 0 && opacity <= 1) {
-    unsigned long real_opacity[] = { opacity * 0xffffffff };
-    XChangeProperty(dpy, c->win, netatom[NetWMWindowOpacity], XA_CARDINAL, 32, PropModeReplace, (unsigned char *)real_opacity, 1);
-  }
-  else
-    XDeleteProperty(dpy, c->win, netatom[NetWMWindowOpacity]);
-}
-
-void
 focus(Client *c) {
 	if(!c || !ISVISIBLE(c))
 		for(c = selmon->stack; c && !ISVISIBLE(c); c = c->snext);
 	/* was if(selmon->sel) */
 	if(selmon->sel && selmon->sel != c)
 		unfocus(selmon->sel, False);
-
-  if(selmon->sel && c!=selmon->sel && c && (!root || (selmon->sel->win!=root && c->win!=root)) ) window_opacity_set(selmon->sel, shade);
-  if(c && c!=selmon->sel && (!root || (c->win!=root)) ) window_opacity_set(c, c->opacity);
 	if(c) {
 		if(c->mon != selmon)
 			selmon = c->mon;
@@ -891,7 +874,6 @@
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
 	selmon->sel = c;
 	drawbars();
-  if(c) window_opacity_set(c, c->opacity);
 }
 
 void
@@ -1126,7 +1108,7 @@
 		die("fatal: could not malloc() %u bytes\n", sizeof(Client));
 	c->win = w;
 	updatetitle(c);
-	if(XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans)) && (c->opacity = -1)) {
+	if(XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
 		c->mon = t->mon;
 		c->tags = t->tags;
 	}
@@ -1569,7 +1551,6 @@
 	netatom[NetActiveWindow] = XInternAtom(dpy, "_NET_ACTIVE_WINDOW", False);
 	netatom[NetSupported] = XInternAtom(dpy, "_NET_SUPPORTED", False);
 	netatom[NetWMName] = XInternAtom(dpy, "_NET_WM_NAME", False);
-  netatom[NetWMWindowOpacity] = XInternAtom(dpy, "_NET_WM_WINDOW_OPACITY", False);
 	netatom[NetWMState] = XInternAtom(dpy, "_NET_WM_STATE", False);
 	netatom[NetWMFullscreen] = XInternAtom(dpy, "_NET_WM_STATE_FULLSCREEN", False);
 	/* init cursors */
